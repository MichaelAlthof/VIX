})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
devtools::install_github("bnosac/cronR")
install.packages("cronR")
install.packages("chron")
rm(list=ls(all=TRUE))
# install and load packages
libraries = c("chron","dplyr","lubridate","xts","plyr","car","nortest","tseries","urca", "RColorBrewer", "dgof", "ks", "KernSmooth", "zoo")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
rm(list=ls(all=TRUE))
# install and load packages
libraries = c("quantmod",chron","dplyr","lubridate","xts","plyr","car","nortest","tseries","urca", "RColorBrewer", "dgof", "ks", "KernSmooth", "zoo")
rm(list=ls(all=TRUE))
# install and load packages
libraries = c("quantmod","chron","dplyr","lubridate","xts","plyr","car","nortest","tseries","urca", "RColorBrewer", "dgof", "ks", "KernSmooth", "zoo")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
knitr::opts_chunk$set(
fig.path = "images/", fig.height = 4
)
library(chron)
library(dplyr)
library(lubridate)
library(RColorBrewer)
library(xts)
library(plyr)
library(car)
library(nortest)
library(tseries)
library(urca)
colors <- brewer.pal(n = 6, name = "Paired")
filter_vix_tick <- function(VIX_Tick_Data = data, RT = "TRADE"){
# filter the VIX Tick Data
VIXFutures <- VIX_Tick_Data %>% filter(CLASS_SYM == "VX")
VIXFutures <- VIXFutures %>% filter(RECORD_TYPE == RT)
VIXFutures <- VIXFutures %>% filter(PRODUCT_TYPE == "FUTURE")
VIXFutures <- VIXFutures %>% filter(TRADE_DATE == as.character(ENTRY_DATE))
# add a new column with the mean
VIXFutures$MID <- (VIXFutures$NBBO_BID_PRICE + VIXFutures$NBBO_ASK_PRICE)/2
if(RT == "TRADE"){
VIXFutures$MID_TRADE <- VIXFutures$MID
VIXFutures <- VIXFutures %>%
select(TRADE_DATE, ENTRY_TIME, NBBO_BID_PRICE, NBBO_ASK_PRICE, MID_TRADE,
PRODUCT_STATE, PRODUCT_TYPE, RECORD_TYPE, LAST_SALE_PRICE,
LAST_SALE_QTY, EXPR_DATE)
} else if(RT == "QTE"){
VIXFutures$MID_QUOTE <- VIXFutures$MID
VIXFutures <- VIXFutures %>%
select(TRADE_DATE, ENTRY_TIME, NBBO_BID_PRICE, NBBO_ASK_PRICE, MID_QUOTE,
PRODUCT_STATE, PRODUCT_TYPE, RECORD_TYPE, EXPR_DATE)
}
# remove lines that occur more than once
VIXFutures <- unique(VIXFutures)
return(VIXFutures)
}
# Example:
# VIXFutures <- filter_vix_tick(VIX_Tick_Data = read.csv("^VIX_TICK_20180102.csv.gz"),
#                               "TRADE")
edit_time_date <- function(VIXFutures){
# ENTRY_TIME
VIXFutures$ENTRY_TIME <- chron(times. = VIXFutures$ENTRY_TIME)
# TRADE_DATE
mat <- matrix(VIXFutures$TRADE_DATE, ncol = 1)
dates <- apply(mat, MARGIN = 1, FUN = function(x){
substr_date <- c(substr(x, 1, 2), substr(x, 3, 5), substr(x, 6, 9))
x <- paste(substr_date[1], substr_date[2], substr_date[3], sep = "-")
x <- strptime(x, format = "%d-%b-%Y")
x <- format(as.Date(x), "20%y-%m-%d")
return(x)
})
VIXFutures$TRADE_DATE <- dates
return(VIXFutures)
}
# Example:
# - Factor 02JAN18 will be character 2018-01-02
# - Factor ENTRY_TIME will be times ENTRY_TIME
# VIXFutures <- edit_time_date(VIXFutures = VIXFutures)
load_all_futures_csv <- function(Path = "D:/Projektarbeit/Data/VIXFutures", RT = "TRADE"){
my_files <- list.files(Path, full.names = TRUE)
vix_tick_all_csv <- lapply(my_files, function(x){
filter_vix_tick(VIX_Tick_Data = read.csv(x), RT)
})
names(vix_tick_all_csv) <- gsub(".csv", "",
list.files(Path, full.names = FALSE),
fixed = TRUE)
vix_tick_df <- do.call("rbind", vix_tick_all_csv)
rownames(vix_tick_df) <- NULL
vix_tick_edit_df <- edit_time_date(VIXFutures = vix_tick_df)
return(vix_tick_edit_df)
}
# Example:
# vix_trade_tick_df <- load_all_futures_csv("D:/Projektarbeit/Data/VIXFutures", "TRADE")
# vix_quote_tick_df <- load_all_futures_csv("D:/Projektarbeit/Data/VIXFutures", "QTE")
# Now you can save this data frame:
# save(vix_trade_tick_df, file = "VIXTradeTickDataFrame.rda")
# save(vix_quote_tick_df, file = "VIXQuoteTickDataFrame.rda")
# To load this saved data frame:
# load("VIXTradeTickDataFrame.rda")
# load("VIXQuoteTickDataFrame.rda")
load_all_spot_csv <- function(Path = "D:/Projektarbeit/Data/VIXSpot"){
my_files <- list.files(Path, full.names = TRUE)
vix_spot_all_csv <- lapply(my_files, function(x){
read.csv(x, stringsAsFactors = F)
})
names(vix_spot_all_csv) <- gsub(".csv", "",
list.files(Path, full.names = FALSE),
fixed = TRUE)
vix_spot_df <- do.call("rbind", vix_spot_all_csv)
rownames(vix_spot_df) <- NULL
# edit trade date and time stamp
vix_spot_df$TRADE_DT <- format(as.Date(vix_spot_df$TRADE_DT, "%m/%d/%Y"), "20%y-%m-%d")
vix_spot_df$TIME_STAMP <- times(vix_spot_df$TIME_STAMP)
# remove lines that occur more than once
vix_spot_df <- unique(vix_spot_df)
return(vix_spot_df)
}
# Example:
# vix_spot_df <- load_all_spot_csv(Path = "D:/Projektarbeit/Data/VIXSpot")
# Now you can save this data frame:
# save(vix_spot_df, file = "VIXSpotDataFrame.rda")
# To load this saved data frame:
# load("VIXSpotDataFrame.rda")
range_vix <- function(VIX_Data, Data_type = "Tick", Range_from = "02:15:00",
Range_to = "15:15:00", Date_from = "2018-01-02",
Date_to = "2018-02-22"){
# VIX Tick data
if(Data_type == "Tick"){
# Time range
VIXFutures <- VIX_Data[which(VIX_Data$ENTRY_TIME >=  Range_from &
VIX_Data$ENTRY_TIME <= Range_to),]
# Date range
VIXFutures <- VIXFutures[which(VIXFutures$TRADE_DATE >= Date_from &
VIXFutures$TRADE_DATE <= Date_to),]
return(VIXFutures)
# VIX Spot data
} else if(Data_type == "Spot"){
# Time range
VIXSpot <- VIX_Data[which(VIX_Data$TIME_STAMP >=  Range_from &
VIX_Data$TIME_STAMP <= Range_to),]
# Date range
VIXSpot <- VIXSpot[which(VIXSpot$TRADE_DT >= Date_from &
VIXSpot$TRADE_DT <= Date_to),]
return(VIXSpot)
} else {
NULL
}
}
take_last_observation <- function(data, data_type = "Tick", feature = "MID_QUOTE"){
if(data_type == "Tick"){
# new column with datetime
VIXFutures <- data %>%
mutate(Datetime = as.POSIXct(paste(TRADE_DATE, ENTRY_TIME, sep=" ")))
# minutes are rounded up
VIXFutures$Datetime <- ceiling_date(VIXFutures$Datetime, "minute")
VIXFutures$relevant_data <- VIXFutures[, feature]
# select the relevant data
VIXFutures <- VIXFutures %>% select(Datetime, relevant_data)
# new data frame with the relevant data
VIXFutures_rd <- as.data.frame(unique(VIXFutures$Datetime))
VIXFutures_rd$Index <- VIXFutures_rd$`unique(VIXFutures$Datetime)`
VIXFutures_rd$relevant_data <- NA
VIXFutures_rd <- VIXFutures_rd %>% select(Index, relevant_data)
# for loop which returns the last observation of a minute
for (i in 1:length(VIXFutures_rd$relevant_data)){
VIXFutures_rd$relevant_data[i] <-
tail(VIXFutures$relevant_data[VIXFutures$Datetime == VIXFutures_rd$Index[i]],
n = 1)
}
return(VIXFutures_rd)
} else if(data_type == "Spot"){
# new column with datetime
VIXSpot <- data %>%
mutate(Datetime = as.POSIXct(paste(TRADE_DT, TIME_STAMP,sep=" ")))
# minutes are rounded up
VIXSpot$Datetime <- ceiling_date(VIXSpot$Datetime, "minute")
# select the relevant data
VIXSpot <- VIXSpot %>% select(Datetime, INDEX_VALUE)
# new data frame with the relevant data
VIXSpot_rd <- as.data.frame(unique(VIXSpot$Datetime))
VIXSpot_rd$Index <- VIXSpot_rd$`unique(VIXSpot$Datetime)`
VIXSpot_rd$relevant_data <- NA
VIXSpot_rd <- VIXSpot_rd %>% select(Index, relevant_data)
# for loop which returns the last observation of a minute
for (i in 1:length(VIXSpot_rd$relevant_data)){
VIXSpot_rd$relevant_data[i] <-
tail(VIXSpot$INDEX_VALUE[VIXSpot$Datetime == VIXSpot_rd$Index[i]],
n = 1)
}
return(VIXSpot_rd)
}
}
rolling_correlation <- function(Data, steps = "hour",
feature1 = "MID_QUOTE_LR", feature2 = "INDEX_VALUE_LR"){
if(steps == "hour"){
Data$Index <- ceiling_date(Data$Datetime, steps)
} else if(steps == "day"){
Data$Index <- date(Data$Datetime)
}
# select relevant features
rd <- data.frame(Data$Index, Data[, feature1], Data[, feature2])
colnames(rd) <- c("Index", feature1, feature2)
# calculate the correlation
cor_fun <- function(x) c(cor(x[, feature1], x[, feature2]))
cor_df <- ddply(rd, .(rd$Index), cor_fun)
colnames(cor_df) <- c("Index", "Correlation")
return(cor_df)
}
# vix_trade_tick_df
load("data/VIXTradeTickDataFrame.rda")
head(vix_trade_tick_df)
# vix_quote_tick_df
load("data/VIXQuoteTickDataFrame.rda")
head(vix_quote_tick_df)
# vix_spot_df
load("data/VIXSpotDataFrame.rda")
head(vix_spot_df)
VIXSpot <- range_vix(vix_spot_df, Data_type = "Spot",
Range_from = "08:30:00",Range_to = "15:15:00",
Date_from = "2018-01-17", Date_to = "2018-02-13")
VIXFutures <- range_vix(vix_quote_tick_df, Data_type = "Tick",
Range_from = "08:30:00", Range_to = "15:15:00",
Date_from = "2018-01-17", Date_to = "2018-02-13")
# Note that we are only use expiry date FEB18
VIXFutures <- VIXFutures %>% filter(EXPR_DATE == "FEB18")
VIXFutures_rd <- take_last_observation(VIXFutures, data_type = "Tick",
feature = "MID_QUOTE")
# column names change:
colnames(VIXFutures_rd) <- c("Datetime", "MID_QUOTE")
VIXSpot_rd <- take_last_observation(VIXSpot, data_type = "Spot")
# column names change:
colnames(VIXSpot_rd) <- c("Datetime", "INDEX_VALUE")
head(VIXFutures_rd)
head(VIXSpot_rd)
m_whole_month <- merge(VIXFutures_rd, VIXSpot_rd, by = c("Datetime"), all = FALSE)
head(m_whole_month)
m_whole_month$MID_QUOTE_LR <- c(0, diff(log(m_whole_month$MID_QUOTE)))
m_whole_month$INDEX_VALUE_LR <- c(0, diff(log(m_whole_month$INDEX_VALUE)))
m_whole_month$DIFF_PRICES <- m_whole_month$INDEX_VALUE - m_whole_month$MID_QUOTE
m_whole_month$DIFF_LR <- m_whole_month$INDEX_VALUE_LR - m_whole_month$MID_QUOTE_LR
head(m_whole_month)
VIXSpot <- range_vix(vix_spot_df, Data_type = "Spot",
Range_from = "08:30:00",Range_to = "15:15:00",
Date_from = "2018-02-05", Date_to = "2018-02-05")
VIXFutures <- range_vix(vix_quote_tick_df, Data_type = "Tick",
Range_from = "08:30:00", Range_to = "15:15:00",
Date_from = "2018-02-05", Date_to = "2018-02-05")
# Note that we are only use expiry date FEB18
VIXFutures <- VIXFutures %>% filter(EXPR_DATE == "FEB18")
VIXFutures_rd <- take_last_observation(VIXFutures, data_type = "Tick",
feature = "MID_QUOTE")
# column names change:
colnames(VIXFutures_rd) <- c("Datetime", "MID_QUOTE")
VIXSpot_rd <- take_last_observation(VIXSpot, data_type = "Spot")
# column names change:
colnames(VIXSpot_rd) <- c("Datetime", "INDEX_VALUE")
m_5th_feb <- merge(VIXFutures_rd, VIXSpot_rd, by = c("Datetime"), all = FALSE)
head(m_5th_feb)
m_5th_feb$MID_QUOTE_LR <- c(0, diff(log(m_5th_feb$MID_QUOTE)))
m_5th_feb$INDEX_VALUE_LR <- c(0, diff(log(m_5th_feb$INDEX_VALUE)))
m_5th_feb$DIFF_PRICES <- m_5th_feb$INDEX_VALUE - m_5th_feb$MID_QUOTE
m_5th_feb$DIFF_LR <- m_5th_feb$INDEX_VALUE_LR - m_5th_feb$MID_QUOTE_LR
head(m_5th_feb)
VIXSpot <- range_vix(vix_spot_df, Data_type = "Spot",
Range_from = "08:30:00",Range_to = "15:15:00",
Date_from = "2018-01-17", Date_to = "2018-02-02")
VIXFutures <- range_vix(vix_quote_tick_df, Data_type = "Tick",
Range_from = "08:30:00", Range_to = "15:15:00",
Date_from = "2018-01-17", Date_to = "2018-02-02")
# Note that we are only use expiry date FEB18
VIXFutures <- VIXFutures %>% filter(EXPR_DATE == "FEB18")
VIXFutures_rd <- take_last_observation(VIXFutures, data_type = "Tick",
feature = "MID_QUOTE")
# column names change:
colnames(VIXFutures_rd) <- c("Datetime", "MID_QUOTE")
VIXSpot_rd <- take_last_observation(VIXSpot, data_type = "Spot")
# column names change:
colnames(VIXSpot_rd) <- c("Datetime", "INDEX_VALUE")
m_before_5th_feb <- merge(VIXFutures_rd, VIXSpot_rd, by = c("Datetime"), all = FALSE)
head(m_before_5th_feb)
m_before_5th_feb$MID_QUOTE_LR <- c(0, diff(log(m_before_5th_feb$MID_QUOTE)))
m_before_5th_feb$INDEX_VALUE_LR <- c(0, diff(log(m_before_5th_feb$INDEX_VALUE)))
m_before_5th_feb$DIFF_PRICES <- m_before_5th_feb$INDEX_VALUE - m_before_5th_feb$MID_QUOTE
m_before_5th_feb$DIFF_LR <- m_before_5th_feb$INDEX_VALUE_LR - m_before_5th_feb$MID_QUOTE_LR
head(m_before_5th_feb)
VIXSpot <- range_vix(vix_spot_df, Data_type = "Spot",
Range_from = "08:30:00",Range_to = "15:15:00",
Date_from = "2018-02-06", Date_to = "2018-02-13")
VIXFutures <- range_vix(vix_quote_tick_df, Data_type = "Tick",
Range_from = "08:30:00", Range_to = "15:15:00",
Date_from = "2018-02-06", Date_to = "2018-02-13")
# Note that we are only use expiry date FEB18
VIXFutures <- VIXFutures %>% filter(EXPR_DATE == "FEB18")
VIXFutures_rd <- take_last_observation(VIXFutures, data_type = "Tick",
feature = "MID_QUOTE")
# column names change:
colnames(VIXFutures_rd) <- c("Datetime", "MID_QUOTE")
VIXSpot_rd <- take_last_observation(VIXSpot, data_type = "Spot")
# column names change:
colnames(VIXSpot_rd) <- c("Datetime", "INDEX_VALUE")
m_after_5th_feb <- merge(VIXFutures_rd, VIXSpot_rd, by = c("Datetime"), all = FALSE)
head(m_after_5th_feb)
m_after_5th_feb$MID_QUOTE_LR <- c(0, diff(log(m_after_5th_feb$MID_QUOTE)))
m_after_5th_feb$INDEX_VALUE_LR <- c(0, diff(log(m_after_5th_feb$INDEX_VALUE)))
m_after_5th_feb$DIFF_PRICES <- m_after_5th_feb$INDEX_VALUE - m_after_5th_feb$MID_QUOTE
m_after_5th_feb$DIFF_LR <- m_after_5th_feb$INDEX_VALUE_LR - m_after_5th_feb$MID_QUOTE_LR
head(m_after_5th_feb)
summary(m_whole_month)
summary(m_5th_feb)
summary(m_before_5th_feb)
summary(m_after_5th_feb)
timeseries <- xts(m_whole_month[, 2:3], order.by = m_whole_month$Datetime)
colnames(timeseries) <- c("futures mid-quote", "VIX")
plot(timeseries,
observation.based = T, lwd = 1, legend.loc = "topleft",
grid.ticks.lty = 3, main = "", major.ticks = "days",
grid.ticks.on = "days", yaxis.right = FALSE, col = colors[c(6,2)],
format.labels = "%b %d %Y", yaxis.same = TRUE)
timeseries <- xts(m_5th_feb[, 2:3], order.by = m_5th_feb$Datetime)
colnames(timeseries) <- c("futures mid-quote", "VIX")
plot(timeseries,
observation.based = T, lwd = 2, legend.loc = "topleft",
grid.ticks.lty = 3, main = "", major.ticks = "hours",
grid.ticks.on = "hours", yaxis.right = FALSE, col = colors[c(6,2)], yaxis.same = TRUE)
timeseries <- xts(m_before_5th_feb[, 2:3], order.by = m_before_5th_feb$Datetime)
colnames(timeseries) <- c("futures mid-quote", "VIX")
plot(timeseries,
observation.based = T, lwd = 1, legend.loc = "topleft",
grid.ticks.lty = 3, main = "", major.ticks = "days",
grid.ticks.on = "days", yaxis.right = FALSE, col = colors[c(6,2)],
format.labels = "%b %d %Y", yaxis.same = TRUE)
timeseries <- xts(m_after_5th_feb[, 2:3], order.by = m_after_5th_feb$Datetime)
colnames(timeseries) <- c("futures mid-quote", "VIX")
plot(timeseries,
observation.based = T, lwd = 1, legend.loc = "topright",
grid.ticks.lty = 3, main = "", major.ticks = "days",
grid.ticks.on = "days", yaxis.right = FALSE, col = colors[c(6,2)],
format.labels = "%b %d %Y", yaxis.same = TRUE)
timeseries <- xts(m_5th_feb[, 4:5], order.by = m_5th_feb$Datetime)
colnames(timeseries) <- c("futures mid-quote", "VIX")
plot(timeseries,
observation.based = T, lwd = 1, legend.loc = "topleft",
grid.ticks.lty = 3, main = "", major.ticks = "hours",
grid.ticks.on = "hours", yaxis.right = FALSE, col = colors[c(6,2)], yaxis.same = TRUE)
timeseries <- xts(m_before_5th_feb[, 4:5], order.by = m_before_5th_feb$Datetime)
colnames(timeseries) <- c("futures mid-quote", "VIX")
plot(timeseries,
observation.based = T, lwd = 1, legend.loc = "topleft",
grid.ticks.lty = 3, main = "", major.ticks = "days",
grid.ticks.on = "days", yaxis.right = FALSE, col = colors[c(6,2)],
format.labels = "%b %d %Y", yaxis.same = TRUE)
timeseries <- xts(m_after_5th_feb[, 4:5], order.by = m_after_5th_feb$Datetime)
colnames(timeseries) <- c("futures mid-quote", "VIX")
plot(timeseries,
observation.based = T, lwd = 1, legend.loc = "bottomright",
grid.ticks.lty = 3, main = "", major.ticks = "days",
grid.ticks.on = "days", yaxis.right = FALSE, col = colors[c(6,2)],
format.labels = "%b %d %Y", yaxis.same = TRUE)
timeseries <- xts(((m_whole_month[, 6])/m_whole_month$INDEX_VALUE)*100,
order.by = m_whole_month$Datetime)
colnames(timeseries) <- c("")
plot(timeseries,
observation.based = T, lwd = 1,
grid.ticks.lty = 3, main = "", major.ticks = "days",
grid.ticks.on = "days", yaxis.right = FALSE, col = colors[2],
format.labels = "%b %d %Y", yaxis.same = TRUE)
timeseries <- xts(((m_5th_feb[, 6])/m_5th_feb$INDEX_VALUE)*100,
order.by = m_5th_feb$Datetime)
colnames(timeseries) <- c("")
plot(timeseries,
observation.based = T, lwd = 1,
grid.ticks.lty = 3, main = "", major.ticks = "hours",
grid.ticks.on = "hours", yaxis.right = FALSE, col = colors[2], yaxis.same = TRUE)
timeseries <- xts(((m_before_5th_feb[, 6])/m_before_5th_feb$INDEX_VALUE)*100,
order.by = m_before_5th_feb$Datetime)
colnames(timeseries) <- c("")
plot(timeseries,
observation.based = T, lwd = 1,
grid.ticks.lty = 3, main = "", major.ticks = "days",
grid.ticks.on = "days", yaxis.right = FALSE, col = colors[2],
format.labels = "%b %d %Y", yaxis.same = TRUE)
timeseries <- xts(((m_after_5th_feb[, 6])/m_after_5th_feb$INDEX_VALUE)*100,
order.by = m_after_5th_feb$Datetime)
colnames(timeseries) <- c("")
plot(timeseries,
observation.based = T, lwd = 1,
grid.ticks.lty = 3, main = "", major.ticks = "days",
grid.ticks.on = "days", yaxis.right = FALSE, col = colors[2],
format.labels = "%b %d %Y", yaxis.same = TRUE)
plot(x = m_whole_month$MID_QUOTE_LR, y = m_whole_month$INDEX_VALUE_LR,
xlab = "futures mid-quote", ylab = "VIX", main = "",
col = colors[2], type = "p", pch = 16)
grid(col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
plot(x = m_5th_feb$MID_QUOTE_LR, y = m_5th_feb$INDEX_VALUE_LR,
xlab = "futures mid-quote", ylab = "VIX", main = "",
col = colors[2], type = "p", pch = 16)
grid(col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
# Use zm() from library zoom to zoom into the plot.
plot(x = m_5th_feb$MID_QUOTE_LR, y = m_5th_feb$INDEX_VALUE_LR,
xlab = "futures mid-quote", ylab = "VIX", main = "",
col = colors[2], type = "p", pch = 16,
xlim = c(-0.024, 0.026), ylim = c(-0.035, 0.046))
grid(col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
plot(x = m_before_5th_feb$MID_QUOTE_LR, y = m_before_5th_feb$INDEX_VALUE_LR,
xlab = "futures mid-quote", ylab = "VIX", main = "",
col = colors[2], type = "p", pch = 16)
grid(col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
plot(x = m_after_5th_feb$MID_QUOTE_LR, y = m_after_5th_feb$INDEX_VALUE_LR,
xlab = "futures mid-quote", ylab = "VIX", main = "",
col = colors[2], type = "p", pch = 16)
grid(col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
hist(m_5th_feb$MID_QUOTE_LR, col = rgb(1, 0, 0, 0.5), breaks = 50, freq = T,
main = "", xlab = "log returns", ylab = "frequency")
hist(m_5th_feb$INDEX_VALUE_LR, col = rgb(0, 0, 1, 0.5), breaks = 50, add = T, freq = T)
grid(col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
legend("topright", legend = c("futures mid-quote", "VIX"),
inset = .02, cex = 0.8,
box.lty = 0, fill = colors[c(2,6)])
hist(m_5th_feb$DIFF_LR, col = rgb(0, 0, 1, 0.5), breaks = 50, freq = T,
main = "", xlab = "log returns", ylab = "frequency")
grid(col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
qqPlot(m_5th_feb$MID_QUOTE_LR, main = "",
distribution = "norm", ylab = " futures mid-quote log returns")
ad.test(m_5th_feb$MID_QUOTE_LR)
qqPlot(m_5th_feb$INDEX_VALUE_LR, main = "",
distribution = "norm", ylab = "VIX log returns")
ad.test(m_5th_feb$INDEX_VALUE_LR)
qqPlot(m_5th_feb$DIFF_LR, main = "",
distribution = "norm", ylab = "difference log returns")
ad.test(m_5th_feb$DIFF_LR)
r_c <- rolling_correlation(m_whole_month, steps = "day")
timeseries <- xts(r_c$Correlation, order.by = r_c$Index)
plot(timeseries,
observation.based = T, lwd = 1, grid.ticks.lty = 3,
main = "", major.ticks = "days",
grid.ticks.on = "days", yaxis.right = FALSE, col = colors[2],
format.labels = "%b %d %Y", yaxis.same = TRUE)
r_c <- rolling_correlation(m_before_5th_feb, steps = "hour")
timeseries <- xts(r_c$Correlation, order.by = r_c$Index)
plot(timeseries,
observation.based = T, lwd = 1, grid.ticks.lty = 3,
main = "", major.ticks = "days",
grid.ticks.on = "days", yaxis.right = FALSE, col = colors[2],
format.labels = "%b %d %Y", yaxis.same = TRUE)
r_c <- rolling_correlation(m_before_5th_feb, steps = "day")
timeseries <- xts(r_c$Correlation, order.by = r_c$Index)
plot(timeseries,
observation.based = T, lwd = 1, grid.ticks.lty = 3,
main = "", major.ticks = "days",
grid.ticks.on = "days", yaxis.right = FALSE, col = colors[2],
format.labels = "%b %d %Y", yaxis.same = TRUE)
r_c <- rolling_correlation(m_after_5th_feb, steps = "hour")
timeseries <- xts(r_c$Correlation, order.by = r_c$Index)
plot(timeseries,
observation.based = T, lwd = 1, grid.ticks.lty = 3,
main = "", major.ticks = "days",
grid.ticks.on = "days", yaxis.right = FALSE, col = colors[2],
format.labels = "%b %d %Y", yaxis.same = TRUE)
r_c <- rolling_correlation(m_after_5th_feb, steps = "day")
timeseries <- xts(r_c$Correlation, order.by = r_c$Index)
plot(timeseries,
observation.based = T, lwd = 1, grid.ticks.lty = 3,
main = "", major.ticks = "days",
grid.ticks.on = "days", yaxis.right = FALSE, col = colors[2],
format.labels = "%b %d %Y", yaxis.same = TRUE)
# Dickey-Fuller test
# p-value = 0.7590, "H(0) = non-stationary" cannot be rejected
adf.test(m_before_5th_feb$MID_QUOTE)
# p-value = 0.8788, "H(0) = non-stationary" cannot be rejected
adf.test(m_before_5th_feb$INDEX_VALUE)
# p-value < 0.01, "H(0) = non-stationary" can be rejected
adf.test(diff(m_before_5th_feb$MID_QUOTE))
# p-value < 0.01, "H(0) = non-stationary" can be rejected
adf.test(diff(m_before_5th_feb$INDEX_VALUE))
# Johansen test
jotest <- ca.jo(data.frame(m_before_5th_feb$MID_QUOTE, m_before_5th_feb$INDEX_VALUE),
type = "trace", K = 2, ecdet = "none", spec = "longrun")
summary(jotest)
s <- 1 * m_before_5th_feb$MID_QUOTE + (-0.5876016) * m_before_5th_feb$INDEX_VALUE
df <- data.frame(m_before_5th_feb$Datetime, s)
timeseries <- xts(df$s, order.by = df$m_before_5th_feb.Datetime)
plot(timeseries,
observation.based = T, lwd = 1, grid.ticks.lty = 3,
main = "", major.ticks = "days",
grid.ticks.on = "days", yaxis.right = FALSE, col = colors[2],
format.labels = "%b %d %Y", yaxis.same = TRUE)
# p-value = 0.08171, "H(0) = non-stationary" can be rejected on
# the 10% level but cannot be rejected at the other levels.
adf.test(s)
# Dickey-Fuller test
# p-value = 0.5604, "H(0) = non-stationary" cannot be rejected
adf.test(m_after_5th_feb$MID_QUOTE)
# p-value = 0.0766, "H(0) = non-stationary" cannot be rejected
adf.test(m_after_5th_feb$INDEX_VALUE)
# p-value < 0.01, "H(0) = non-stationary" can be rejected
adf.test(diff(m_after_5th_feb$MID_QUOTE))
# p-value < 0.01, "H(0) = non-stationary" can be rejected
adf.test(diff(m_after_5th_feb$INDEX_VALUE))
jotest <- ca.jo(data.frame(m_after_5th_feb$MID_QUOTE, m_after_5th_feb$INDEX_VALUE),
type = "trace", K = 2, ecdet = "none", spec = "longrun")
summary(jotest)
